@page "/category/{Id:int}"

@using System.Linq;

@inherits Page

<div class="row">
    <SearchFrom OnChanged="FilterGoods" />
</div>

<div class="row">
    @foreach (var good in goods.Data)
    {
        <GoodCard Model="good" />
    }
</div>

<div class="row">
    <Pagination Model="pagination" OnChange="OnChangePage" />
</div>


@code
{
    [Parameter]
    public int Id { get; set; }

    private PaginationModel pagination = new PaginationModel();
    private Result<GoodsByCategoryQuery.Good> goods = new Result<GoodsByCategoryQuery.Good>();
    private FilterModel filter = new FilterModel();


    protected override void Breadcrumbs()
    {
        BasePage.AddBreadcrump(new List<Breadcrumb>
    {
            new Breadcrumb { Name = "Categories", Route = "/" },
            new Breadcrumb { Name = Category.Crumb(Id), Active = true }
        });
    }

    protected override async Task OnInitializedAsync()
    {
        goods = await GetGoods(filter);
    }

    private async Task<Result<GoodsByCategoryQuery.Good>> GetGoods(FilterModel filter)
    {
        Result<GoodsByCategoryQuery.Good> res = new Result<GoodsByCategoryQuery.Good>();
        try
        {
            res = await mediator.Send<Result<GoodsByCategoryQuery.Good>>(new GoodsByCategoryQuery.Request()
            {
                CategoryId = Id,
                Skip = (filter.Page - 1) * filter.Take,
                Take = filter.Take,
                Search = filter.Search
            });

            pagination.LastPage = res.Total / filter.Take + 1;
        }
        catch (Exception ex)
        {
            await BasePage.ShowError(ex.Message); 
        }

        return res;
    }

    private async Task OnChangePage(int page)
    {
        filter.Page = page;
        pagination.Page = page;
        goods = await GetGoods(filter);
    }

    private async Task FilterGoods(string str)
    {
        pagination.Page = 1;
        filter.Page = 1;
        filter.Search = str;
        goods = await GetGoods(filter);
    }
}